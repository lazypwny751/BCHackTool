#!/bin/bash

# Multi Language Processor - Code Generator for language scripts
#   https://mlp-in-a-nutshell.fandom.com/wiki/Twilight_Sparkle
#   TODO: make optional verbose

set -e

unset OPT
export status="true" OUTD="mlout"

while (( "${#}" > 0 )) ; do
    case "${1,,}" in
        "--path")
            shift
            if [[ -n "${1}" ]] ; then
                export OUTD="${1}"
                shift
            fi
        ;;
        *)
            export OPT+=("${1}")
            shift
        ;;
    esac
done

if [[ ! -d "${OUTD}" ]] ; then
    mkdir -p "${OUTD}"
fi

# Subfunctions for language scripts
mlp.header() {
    if [[ -n "${1}" ]] ; then
        export header="${1}" 
        export mlfile="${OUTD}/${header}.sh"
        printf "#!/bin/bash\n
# Do not edit this file cause generated automatically with mlp-codegen\n
case \"\${1}\" in" > "${mlfile}" && {
        echo "== created \"${mlfile##*/}\" for \"${header}\" =="
}
    else
        echo "${0##*/}: first parameter needed for heading."
    fi
}

mlp.aliases() {
    if [[ -n "${mlfile}" ]] ; then
        local aliasfile="${OUTD}/alias.sh"
        printf "# == aliases for ${mlfile##*/} ==\n" >> "${aliasfile}"
        source "${aliasfile}"

        if [[ -z "${ALIAS[@]}" ]] || [[ "${ALIAS[@]}" != *"${header}"* ]] ; then
            printf "ALIAS+=(\"${header}:${mlfile##*/}\")\n" >> "${aliasfile}" && {
                echo "registered an alias for \"${header}\" is \"${header}\""
            }
        fi

        for a in "${@}" ; do
            if [[ "${ALIAS[@]}" != *"${a}"* ]] ; then
                echo "ALIAS+=(\"${a}:${mlfile##*/}\")" >> "${aliasfile}" && {
                    echo "registered an alias for \"${header}\" is \"${a}\""
                }
            fi
        done
    else
        echo "${0##*/}: header not found: require \"mlp.header <name>\""
        exit 1
    fi
}

mlp.push() {
    if (( "${#}" >= 2 )) && [[ -n "${mlfile}" ]] ; then
        printf "\n\t\"${1}\")
\t\techo \"${2}\"
\t;;\n" >> "${mlfile}" && {
        echo "> add new element by id: \"${1}\" for \"${header}\""
}
    else
        echo -e "${0##*/}: missing parameter, needed: ID: \$1, TR: \$2\n also required an header: \"mlp.header <name>\""
        exit 1
    fi
}

mlp.end() {
    if [[ -n "${mlfile}" ]] ; then
        printf "\n\t*)
\t\techo \"\${1}\" # return id
\t;;
esac\n" >> "${mlfile}" && {
        echo "== end of \"${header}\" =="
}
    else
        echo -e "${0##*/}: missing header: require \"mlp.header <name>\""
        exit 1
    fi
}

# There's no parser so be careful when you start to write a transcription script
for f in "${OPT[@]}" ; do
    if [[ -f "${f}" ]] ; then
        (
            source "${f}"
        )
    fi
done